Index: api/v1/endpoints/crypto.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from fastapi import APIRouter\nfrom typing import Any\nfrom datetime import datetime\nimport ccxt\n\nfrom schemas.v1.crypto import TradeSignalResponse\n\n# Initialize the API Router\nrouter = APIRouter()\n\n# Initialize the exchange (use Binance for BTC/USDT pair)\nexchange = ccxt.binance()\n\n\n# Define a function to fetch BTC/USD price\ndef fetch_btc_usd_price() -> float:\n    ticker = exchange.fetch_ticker('BTC/USDT')  # Using USDT as it's commonly used for USD pair\n    return ticker['last']\n\n\n# Define the stop loss and target price percentages\nSTOP_LOSS_PERCENTAGE = 2  # 2% below the current price\nTARGET_PRICE_PERCENTAGE = 5  # 5% above the current price\n\n\n# Define a function to calculate stop loss and target price\ndef calculate_stop_loss_and_target(current_price: float) -> dict:\n    stop_loss = current_price * (1 - STOP_LOSS_PERCENTAGE / 100)\n    target_price = current_price * (1 + TARGET_PRICE_PERCENTAGE / 100)\n    return {\"stop_loss\": round(stop_loss, 2), \"target_price\": round(target_price, 2)}\n\n\n# Define a function to determine the trade signal\ndef get_trade_signal() -> dict:\n    current_price = fetch_btc_usd_price()\n\n    # Fetch previous price (this could be from a database or from past API calls)\n    previous_price = current_price  # In real case, store and fetch previous values\n\n    # Example condition for trading signal: simple price comparison\n    if current_price > previous_price:\n        trade_signal = \"buy\"\n    elif current_price < previous_price:\n        trade_signal = \"sell\"\n    else:\n        trade_signal = \"hold\"\n\n    # Calculate stop loss and target price\n    stop_loss_and_target = calculate_stop_loss_and_target(current_price)\n\n    return {\n        \"trade_signal\": trade_signal,\n        \"current_price\": current_price,\n        **stop_loss_and_target\n    }\n\n\n# Endpoint to return the BTC/USD trade signal with stop loss and target price\n@router.get(\"/btc-usd-signal\", response_model=TradeSignalResponse)\nasync def get_btc_usd_signal() -> Any:\n    signal_data = get_trade_signal()\n    return TradeSignalResponse(\n        timestamp=datetime.utcnow().isoformat(),\n        symbol=\"BTC/USD\",\n        trade_signal=signal_data[\"trade_signal\"],\n        current_price=signal_data[\"current_price\"],\n        stop_loss=signal_data[\"stop_loss\"],\n        target_price=signal_data[\"target_price\"]\n    )\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/v1/endpoints/crypto.py b/api/v1/endpoints/crypto.py
--- a/api/v1/endpoints/crypto.py	(revision 6ae327171f539848817f6db8f684715ec1693a22)
+++ b/api/v1/endpoints/crypto.py	(date 1732796737220)
@@ -5,39 +5,31 @@
 
 from schemas.v1.crypto import TradeSignalResponse
 
-# Initialize the API Router
 router = APIRouter()
 
-# Initialize the exchange (use Binance for BTC/USDT pair)
 exchange = ccxt.binance()
 
 
-# Define a function to fetch BTC/USD price
 def fetch_btc_usd_price() -> float:
-    ticker = exchange.fetch_ticker('BTC/USDT')  # Using USDT as it's commonly used for USD pair
+    ticker = exchange.fetch_ticker('BTC/USDT')
     return ticker['last']
 
 
-# Define the stop loss and target price percentages
-STOP_LOSS_PERCENTAGE = 2  # 2% below the current price
-TARGET_PRICE_PERCENTAGE = 5  # 5% above the current price
+STOP_LOSS_PERCENTAGE = 2
+TARGET_PRICE_PERCENTAGE = 5
 
 
-# Define a function to calculate stop loss and target price
 def calculate_stop_loss_and_target(current_price: float) -> dict:
     stop_loss = current_price * (1 - STOP_LOSS_PERCENTAGE / 100)
     target_price = current_price * (1 + TARGET_PRICE_PERCENTAGE / 100)
     return {"stop_loss": round(stop_loss, 2), "target_price": round(target_price, 2)}
 
 
-# Define a function to determine the trade signal
 def get_trade_signal() -> dict:
     current_price = fetch_btc_usd_price()
 
-    # Fetch previous price (this could be from a database or from past API calls)
-    previous_price = current_price  # In real case, store and fetch previous values
+    previous_price = current_price
 
-    # Example condition for trading signal: simple price comparison
     if current_price > previous_price:
         trade_signal = "buy"
     elif current_price < previous_price:
@@ -45,7 +37,6 @@
     else:
         trade_signal = "hold"
 
-    # Calculate stop loss and target price
     stop_loss_and_target = calculate_stop_loss_and_target(current_price)
 
     return {
@@ -55,7 +46,6 @@
     }
 
 
-# Endpoint to return the BTC/USD trade signal with stop loss and target price
 @router.get("/btc-usd-signal", response_model=TradeSignalResponse)
 async def get_btc_usd_signal() -> Any:
     signal_data = get_trade_signal()
Index: api/v1/endpoints/stock.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from fastapi import APIRouter, HTTPException\n\nfrom schemas.v1.stock import StockInsightRequest, StockInsightResponse\nfrom services.stock import fetch_real_time_stock_data, generate_stock_predictions\n\nrouter = APIRouter()\n\n\n@router.post(\"/stock-insight\", response_model=StockInsightResponse)\nasync def get_stock_insight(request: StockInsightRequest):\n    \"\"\"\n    Fetch real-time stock data and provide predictions for the specified number of days.\n    \"\"\"\n    # Fetch real-time stock price\n    try:\n        current_price = fetch_real_time_stock_data(request.stock_symbol.upper())\n    except HTTPException as e:\n        raise e\n\n    # Generate predictions\n    predictions = generate_stock_predictions(current_price, request.days)\n\n    # Prepare response\n    response = StockInsightResponse(\n        stock_symbol=request.stock_symbol.upper(),\n        current_price=current_price,\n        predictions=predictions,\n        data_source=\"Alpha Vantage\"\n    )\n    return response\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/api/v1/endpoints/stock.py b/api/v1/endpoints/stock.py
--- a/api/v1/endpoints/stock.py	(revision 6ae327171f539848817f6db8f684715ec1693a22)
+++ b/api/v1/endpoints/stock.py	(date 1732796737248)
@@ -8,19 +8,13 @@
 
 @router.post("/stock-insight", response_model=StockInsightResponse)
 async def get_stock_insight(request: StockInsightRequest):
-    """
-    Fetch real-time stock data and provide predictions for the specified number of days.
-    """
-    # Fetch real-time stock price
     try:
         current_price = fetch_real_time_stock_data(request.stock_symbol.upper())
     except HTTPException as e:
         raise e
 
-    # Generate predictions
     predictions = generate_stock_predictions(current_price, request.days)
 
-    # Prepare response
     response = StockInsightResponse(
         stock_symbol=request.stock_symbol.upper(),
         current_price=current_price,
Index: schemas/v1/stock.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from pydantic import BaseModel\nfrom typing import List\n\nclass StockInsightRequest(BaseModel):\n    stock_symbol: str  # e.g., \"AAPL\" (case-insensitive)\n    days: int          # Number of days for predictions (e.g., 5)\n\nclass StockPrediction(BaseModel):\n    date: str          # Date of the prediction\n    predicted_price: float  # Predicted stock price\n\nclass StockInsightResponse(BaseModel):\n    stock_symbol: str\n    current_price: float\n    predictions: List[StockPrediction]\n    data_source: str  # API provider used for fetching stock data\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/schemas/v1/stock.py b/schemas/v1/stock.py
--- a/schemas/v1/stock.py	(revision 6ae327171f539848817f6db8f684715ec1693a22)
+++ b/schemas/v1/stock.py	(date 1732796737234)
@@ -1,16 +1,19 @@
 from pydantic import BaseModel
 from typing import List
 
+
 class StockInsightRequest(BaseModel):
-    stock_symbol: str  # e.g., "AAPL" (case-insensitive)
-    days: int          # Number of days for predictions (e.g., 5)
+    stock_symbol: str
+    days: int
+
 
 class StockPrediction(BaseModel):
-    date: str          # Date of the prediction
-    predicted_price: float  # Predicted stock price
+    date: str
+    predicted_price: float
+
 
 class StockInsightResponse(BaseModel):
     stock_symbol: str
     current_price: float
     predictions: List[StockPrediction]
-    data_source: str  # API provider used for fetching stock data
+    data_source: str
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"AutoImportSettings\">\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\n  </component>\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"ae586fd5-6392-489b-ae65-9da77ebdf048\" name=\"Changes\" comment=\"\" />\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"FileTemplateManagerImpl\">\n    <option name=\"RECENT_TEMPLATES\">\n      <list>\n        <option value=\"FastAPI main\" />\n        <option value=\"FastAPI test_main\" />\n        <option value=\"Python Script\" />\n      </list>\n    </option>\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"PUSH_AUTO_UPDATE\" value=\"true\" />\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitHubPullRequestSearchHistory\">{\n  &quot;lastFilter&quot;: {\n    &quot;state&quot;: &quot;OPEN&quot;,\n    &quot;assignee&quot;: &quot;kishanpatel2405&quot;\n  }\n}</component>\n  <component name=\"GithubPullRequestsUISettings\">{\n  &quot;selectedUrlAndAccountId&quot;: {\n    &quot;url&quot;: &quot;https://github.com/kishanpatel2405/personal_api.git&quot;,\n    &quot;accountId&quot;: &quot;af50deac-a40b-4758-a2b0-606670c62433&quot;\n  }\n}</component>\n  <component name=\"ProjectColorInfo\">{\n  &quot;associatedIndex&quot;: 5\n}</component>\n  <component name=\"ProjectId\" id=\"2pQkNZIqseeqcwSXL24FE22n7lh\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\n  </component>\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">{\n  &quot;keyToString&quot;: {\n    &quot;FastAPI.personal_api.executor&quot;: &quot;Run&quot;,\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\n    &quot;git-widget-placeholder&quot;: &quot;master&quot;,\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\n  }\n}</component>\n  <component name=\"RunManager\">\n    <configuration name=\"personal_api\" type=\"Python.FastAPI\">\n      <option name=\"appName\" value=\"personal_api\" />\n      <option name=\"file\" value=\"$PROJECT_DIR$/main.py\" />\n      <module name=\"personal_api\" />\n      <option name=\"ENV_FILES\" value=\"\" />\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\n      <option name=\"PARENT_ENVS\" value=\"true\" />\n      <option name=\"SDK_HOME\" value=\"$PROJECT_DIR$/.venv/bin/python\" />\n      <option name=\"SDK_NAME\" value=\"Python 3.12 (personal_api)\" />\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\n      <EXTENSION ID=\"net.ashald.envfile\">\n        <option name=\"IS_ENABLED\" value=\"true\" />\n        <option name=\"IS_SUBST\" value=\"false\" />\n        <option name=\"IS_PATH_MACRO_SUPPORTED\" value=\"false\" />\n        <option name=\"IS_IGNORE_MISSING_FILES\" value=\"false\" />\n        <option name=\"IS_ENABLE_EXPERIMENTAL_INTEGRATIONS\" value=\"false\" />\n        <ENTRIES>\n          <ENTRY IS_ENABLED=\"true\" PARSER=\"runconfig\" IS_EXECUTABLE=\"false\" />\n        </ENTRIES>\n      </EXTENSION>\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\n      <method v=\"2\" />\n    </configuration>\n  </component>\n  <component name=\"SharedIndexes\">\n    <attachedChunks>\n      <set>\n        <option value=\"bundled-js-predefined-d6986cc7102b-e768b9ed790e-JavaScript-PY-243.21565.199\" />\n        <option value=\"bundled-python-sdk-cab1f2013843-4ae2d6a61b08-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-243.21565.199\" />\n      </set>\n    </attachedChunks>\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"ae586fd5-6392-489b-ae65-9da77ebdf048\" name=\"Changes\" comment=\"\" />\n      <created>1732705647798</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1732705647798</updated>\n      <workItem from=\"1732705649087\" duration=\"3892000\" />\n      <workItem from=\"1732770246192\" duration=\"802000\" />\n      <workItem from=\"1732777792941\" duration=\"1444000\" />\n      <workItem from=\"1732779586923\" duration=\"2327000\" />\n      <workItem from=\"1732786295018\" duration=\"2965000\" />\n    </task>\n    <servers />\n  </component>\n  <component name=\"TypeScriptGeneratedFilesManager\">\n    <option name=\"version\" value=\"3\" />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State />\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\n    <SUITE FILE_PATH=\"coverage/personal_api$personal_api.coverage\" NAME=\"personal_api Coverage Results\" MODIFIED=\"1732706569537\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 6ae327171f539848817f6db8f684715ec1693a22)
+++ b/.idea/workspace.xml	(date 1732796737360)
@@ -4,7 +4,12 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="ae586fd5-6392-489b-ae65-9da77ebdf048" name="Changes" comment="" />
+    <list default="true" id="ae586fd5-6392-489b-ae65-9da77ebdf048" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.gitignore" beforeDir="false" afterPath="$PROJECT_DIR$/.gitignore" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/v1/endpoints/crypto.py" beforeDir="false" afterPath="$PROJECT_DIR$/api/v1/endpoints/crypto.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api/v1/endpoints/stock.py" beforeDir="false" afterPath="$PROJECT_DIR$/api/v1/endpoints/stock.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/schemas/v1/stock.py" beforeDir="false" afterPath="$PROJECT_DIR$/schemas/v1/stock.py" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -110,6 +115,7 @@
       <workItem from="1732777792941" duration="1444000" />
       <workItem from="1732779586923" duration="2327000" />
       <workItem from="1732786295018" duration="2965000" />
+      <workItem from="1732796161518" duration="576000" />
     </task>
     <servers />
   </component>
@@ -117,8 +123,18 @@
     <option name="version" value="3" />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
+    <option name="OPEN_GENERIC_TABS">
+      <map>
+        <entry key="1d3512df-9d52-47f4-b641-9a6fafdf2082" value="TOOL_WINDOW" />
+      </map>
+    </option>
     <option name="TAB_STATES">
       <map>
+        <entry key="1d3512df-9d52-47f4-b641-9a6fafdf2082">
+          <value>
+            <State />
+          </value>
+        </entry>
         <entry key="MAIN">
           <value>
             <State />
